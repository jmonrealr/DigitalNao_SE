# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5 import QtCore, QtGui
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QImage, QPainter, QPen
from PyQt5.QtCore import *


class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Paint")
        self.resize(800, 600)

        self.image = QImage(self.size(), QImage.Format_RGB32)
        self.image.fill(Qt.white)

        self.drawing = False
        self.lastPoint = QPoint()
        self.brushColor = Qt.black

        self.menuBar = QMenuBar(self)
        self.menuBar.setObjectName("menuBar")

        self.menuColor = QMenu(self.menuBar)
        self.menuColor.setTitle("Color")
        self.menuColor.setObjectName("menuColor")
        self.menuFile = QMenu(self.menuBar)
        self.menuFile.setObjectName("menuFile")
        self.menuFile.setTitle("File")
        self.setMenuBar(self.menuBar)

        self.actionBlack = QAction(self)
        self.actionBlack.setObjectName("actionBlack")
        self.actionBlack.setText("Black")
        self.actionBlack.triggered.connect(self.blackColor)
        self.actionRed = QAction(self)
        self.actionRed.setObjectName("actionRed")
        self.actionRed.setText("Red")
        self.actionRed.triggered.connect(self.redColor)
        self.actionGreen = QAction(self)
        self.actionGreen.setObjectName("actionGreen")
        self.actionGreen.setText("Green")
        self.actionGreen.triggered.connect(self.greenColor)
        self.actionBlue = QAction(self)
        self.actionBlue.setObjectName("actionBlue")
        self.actionBlue.setText("Blue")
        self.actionBlue.triggered.connect(self.blueColor)
        self.actionYellow = QAction(self)
        self.actionYellow.setObjectName("actionYellow")
        self.actionYellow.setText("Yellow")
        self.actionYellow.triggered.connect(self.yellowColor)
        self.actionDarkRed = QAction(self)
        self.actionDarkRed.setObjectName("actionDarkRed")
        self.actionDarkRed.setText("DarkRed")
        self.actionDarkRed.triggered.connect(self.darkRedColor)
        self.actionGray = QAction(self)
        self.actionGray.setObjectName("actionGray")
        self.actionGray.setText("Gray")
        self.actionGray.triggered.connect(self.grayColor)

        self.clear = QAction(self)
        self.clear.setObjectName("clear")
        self.clear.setText("Clear")
        self.clear.triggered.connect(self.clearCanvas)
        self.exit = QAction(self)
        self.exit.setObjectName("exit")
        self.exit.setText("Exit")
        self.exit.triggered.connect(lambda: self.close())

        self.menuColor.addAction(self.actionBlack)
        self.menuColor.addAction(self.actionRed)
        self.menuColor.addAction(self.actionGreen)
        self.menuColor.addAction(self.actionBlue)
        self.menuColor.addAction(self.actionYellow)
        self.menuColor.addAction(self.actionGray)
        self.menuColor.addAction(self.actionDarkRed)

        self.menuFile.addAction(self.clear)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.exit)

        self.menuBar.addAction(self.menuFile.menuAction())
        self.menuBar.addAction(self.menuColor.menuAction())

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.drawing = True
            self.lastPoint = event.pos()

    def mouseMoveEvent(self, event):
        if (event.buttons() & Qt.LeftButton) & self.drawing:
            painter = QPainter(self.image)
            painter.setPen(QPen(self.brushColor, 4, Qt.SolidLine, Qt.RoundCap, Qt.RoundJoin))
            painter.drawLine(self.lastPoint, event.pos())
            self.lastPoint = event.pos()
            self.update()

    def mouseReleaseEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.drawing = False

    def paintEvent(self, event):
        canvasPainter = QPainter(self)
        canvasPainter.drawImage(self.rect(), self.image, self.image.rect())

    def clearCanvas(self):
        self.image.fill(Qt.white)
        self.update()

    def blackColor(self):
        self.brushColor = Qt.black

    def redColor(self):
        self.brushColor = Qt.red

    def darkRedColor(self):
        self.brushColor = Qt.darkRed

    def greenColor(self):
        self.brushColor = Qt.green

    def yellowColor(self):
        self.brushColor = Qt.yellow

    def grayColor(self):
        self.brushColor = Qt.gray

    def blueColor(self):
        self.brushColor = Qt.blue


if __name__ == "__main__":
    # app = QApplication(sys.argv)
    # window = QMainWindow()
    # ui = Ui_MainWindow()
    # ui.setupUi(window)
    # window.show()

    app = QApplication(sys.argv)
    ui = Ui_MainWindow()
    ui.show()
    sys.exit(app.exec_())
